apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-file
spec:
  workspaces:
    - name: source
      description: The workspace to create the readme file in
  steps:
    - name: write-new-stuff
      image: ubuntu
      script: 'touch $(workspaces.source.path)/README.md'
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: check-file
spec:
  params:
    - name: path
  workspaces:
    - name: source
      description: The workspace to check for the file
  results:
    - name: exists
      description: indicates whether the file exists or is missing
  steps:
    - name: check-file
      image: alpine
      script: |
        if test -f $(workspaces.source.path)/$(params.path); then
        printf yes | tee /tekton/results/exists
        else
        printf no | tee /tekton/results/exists
        fi
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: echo-file-exists
spec:
  steps:
    - name: echo
      image: ubuntu
      script: 'echo file exists'
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: task-should-be-skipped-1
spec:
  steps:
    - name: echo
      image: ubuntu
      script: exit 1
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: task-should-be-skipped-2
spec:
  steps:
    - name: echo
      image: ubuntu
      script: exit 1
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: finally
spec:
  steps:
    - name: echo
      image: ubuntu
      script: 'echo FINALLY DONE'
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: when-pipe
spec:
  params:
    - name: path
      type: string
      description: The path of the file to be created
  workspaces:
    - name: source
  tasks:
    - name: create-file
      when:
        - input: "$(params.path)"
          operator: in
          values: ["README.md"]
      workspaces:
        - name: source
          workspace: source
      taskRef:
        name: create-file
    - name: check-file
      params:
        - name: path
          value: "$(params.path)"
      workspaces:
        - name: source
          workspace: source
      runAfter:
        - create-file
      taskRef:
        name: check-file
    - name: echo-file-exists # when expression using task result, evaluates to true
      when:
        - input: "$(tasks.check-file.results.exists)"
          operator: in
          values: ["yes"]
      taskRef:
        name: echo-file-exists
    - name: task-should-be-skipped-1
      when:
        - input: "$(tasks.check-file.results.exists)" # when expression using task result, evaluates to false
          operator: in
          values: ["missing"]
      taskRef:
        name: task-should-be-skipped-1
    - name: task-should-be-skipped-2
      when:
        - input: "$(params.path)"
          operator: notin
          values: ["README.md"]
      taskRef:
        name: task-should-be-skipped-2
  finally:
    - name: do-something-finally
      taskRef: 
        name: finally
---
apiVersion: tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: pipeline-template
spec:
  params:
    - name: gitrevision
      description: The git revision
      default: master
    - name: gitrepositoryurl
      description: The git repository url
    - name: message
      description: The message to print
      default: This is the default message
  resourcetemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: pipelinerun-pvc
      spec:
        resources:
          requests:
            storage:  5Gi
        volumeMode: Filesystem
        accessModes:
          - ReadWriteOnce
    - apiVersion: tekton.dev/v1beta1
      kind: PipelineRun
      metadata:
        generateName: when-pipe-run
      spec:
        serviceAccountName: 'default'
        pipelineRef: 
          name: when-pipe
        params:
          - name: path
            value: README.md
        workspaces:
          - name: source
            persistentVolumeClaim:
              claimName: pipelinerun-pvc
---
apiVersion: tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: pipeline-binding
spec:
  params:
    - name: gitrevision
      value: $(event.head_commit.id)
    - name: gitrepositoryurl
      value: $(event.repository.url)
---
apiVersion: tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: manual-pipeline-binding
spec:
  params:
    - name: gitrevision
      value: v0.32.0
    - name: gitrepositoryurl
      value: https://github.com/GoogleContainerTools/skaffold
---
apiVersion: tekton.dev/v1beta1
kind: EventListener
metadata:
  name: listener
spec:
  triggers:
    - binding:
        name: pipeline-binding
      template:
        name: pipeline-template
      params:
        - name: message
          value: Hello from the Git Triggers EventListener!
---
apiVersion: tekton.dev/v1beta1
kind: EventListener
metadata:
  name: manual-listener
spec:
  triggers:
    - binding:
        name: manual-pipeline-binding
      template:
        name: pipeline-template
      params:
        - name: message
          value: Hello from the Manual Triggers EventListener!
